{"version":3,"file":"main.481d6734d92a541636b1.bundle.js","sources":["webpack:///./src/wheel.js"],"sourcesContent":["import React from 'react';\nimport { propTypes, defaultProps } from 'proptypes-helper';\nimport injectSheet, { jss } from 'react-jss';\n\nconst styles = {\n  wheel: {\n    position: 'absolute',\n    backgroundSize: 'cover',\n    backgroundImage: p => p.backgroundImage,\n    width: p => p.radius * 2,\n    height: p => p.radius * 2,\n    transform: p => `translate3d(${-p.radius}px, ${-p.radius}px, 0) rotate(0deg)`,\n    top: p => p.top,\n    left: p => p.left,\n  },\n  animating: {\n    display: 'none',\n  },\n};\n\njss.createStyleSheet({\n  '@keyframes cassette-tape-wheel-rotate': {\n    from: {\n      transform: `translateX(var(--wheel-radius)) translateY(var(--wheel-radius)) rotate(60deg)`,\n    },\n    to: {\n      transform: `translateX(var(--wheel-radius)) translateY(var(--wheel-radius)) rotate(0deg)`,\n    },\n  }\n}).attach()\n\nconst maxVelocity = 2;\nclass Wheel extends React.Component {\n  constructor(p) {\n    super(p);\n    this.ref = React.createRef();\n    this.aniRef = React.createRef();\n    this.keepRotating = false;\n    this.animating = false;\n  }\n\n  animationStart = velocity => {\n    const { ref: { current: rotation }, aniRef: { current: animation }, props: p } = this;\n    if (this.animating) {\n      animation.style.animationDuration = `${3 / velocity / 6}s`;\n    } else {\n      this.animating = true;\n      rotation.style.opacity = 0;\n      animation.style.display = 'block';\n      animation.style.animation = `cassette-tape-wheel-rotate infinite ${3 / velocity / 6}s linear`;\n    }\n  }\n  animationStop = () => {\n    if (!this.animating) return;\n    this.animating = false;\n    const { ref: { current: rotation }, aniRef: { current: animation }, props: p } = this;\n    rotation.style.opacity = 1;\n    animation.style.display = 'none';\n    animation.style.animation = 'none';\n  }\n\n  shouldComponentUpdate = (p) => {\n    if (p.velocity === 0) {\n      this.animationStop();\n      this.keepRotating = false;\n    } else if (p.velocity > maxVelocity) {\n      this.animationStart(p.velocity);\n    } else {\n      this.animationStop();\n      if (!this.keepRotating) {\n        this.keepRotating = true;\n        this.rotate(p.velocity);\n      }\n    }\n    return false;\n  }\n\n  rotate = vel => {\n    const velocity = vel > maxVelocity ? maxVelocity :  vel;\n    const { ref: { current: elem }, props: p } = this;\n    elem.style.transition = 'none';\n    elem.style.transform = `translateX(${-p.radius}px) translateY(${-p.radius}px) rotate(0deg)`;\n    setTimeout(() => {\n      elem.style.transition = `transform ${(velocity && 3 / velocity / 6)}s linear`;\n      if (velocity) {\n        elem.style.transform = `translate3d(${-p.radius}px, ${-p.radius}px, 0) rotate(-60deg)`;\n      } else {\n        elem.style.transform = `translate3d(${-p.radius}px, ${-p.radius}px, 0) rotate(0deg)`;\n      }\n    });\n  }\n\n  transitionEnd = (e) => {\n    const { ref: { current: elem }, props: p } = this;\n    if (this.keepRotating) {\n      this.rotate(p.velocity);\n    }\n  }\n\n  render() {\n    const { props: { classes, velocity }, animating } = this;\n    const rotatingClassName = classes.wheel;\n    const animatingClassName = `${classes.wheel} ${classes.animating}`;\n    return (\n      <>\n        <div className={rotatingClassName} ref={this.ref} onTransitionEnd={this.transitionEnd} />\n        <div className={animatingClassName} ref={this.aniRef} style={{\n          ['--wheel-radius']: `-${this.props.radius}px`\n        }} onTransitionEnd={this.transitionEnd} />\n      </>\n    );\n  }\n}\n\nconst types = {\n  required: {\n    // velocity: positive when cw\n    velocity: 0,\n    // backgroundImage hexagonal image\n    backgroundImage: '',\n  },\n  optional: {\n    top: 0,\n    left: 0,\n    radius: 29, // ~ mm\n  }\n};\n\nWheel.propTypes = { ...propTypes(types) };\nWheel.defaultProps = { ...defaultProps(types) };\n\nexport default injectSheet(styles)(Wheel);\n"],"mappings":"AAoBA","sourceRoot":""}